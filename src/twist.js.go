package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func src_js_twist_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x8e,
		0x3f, 0x4f, 0xc3, 0x30, 0x10, 0xc5, 0xe7, 0xf8, 0x53, 0x3c, 0x75, 0x6a,
		0x03, 0xb4, 0xb0, 0x16, 0x31, 0xa1, 0x22, 0x2a, 0x05, 0x16, 0x3a, 0xb2,
		0x18, 0xfb, 0x42, 0x4e, 0x32, 0x4e, 0xe4, 0x5c, 0x12, 0x2a, 0xd4, 0xef,
		0xce, 0x05, 0x97, 0xb9, 0x83, 0x87, 0x7b, 0x7f, 0xfc, 0x7b, 0x66, 0x53,
		0x96, 0x06, 0x25, 0x0e, 0x13, 0xf7, 0x82, 0xf1, 0x76, 0x7d, 0x77, 0xe3,
		0x69, 0x54, 0x65, 0x16, 0x97, 0x6e, 0x85, 0x67, 0x9b, 0xd2, 0x11, 0x95,
		0x9d, 0x12, 0x45, 0x47, 0x67, 0xa3, 0x62, 0x47, 0xb1, 0xa7, 0x2d, 0x5e,
		0xf6, 0x87, 0xf9, 0x9e, 0xdf, 0x53, 0x9b, 0x20, 0x0d, 0xa1, 0x1e, 0x42,
		0x80, 0x6b, 0xbb, 0x63, 0xe2, 0xcf, 0x46, 0x60, 0xa3, 0x47, 0xc8, 0x71,
		0x70, 0xac, 0xdb, 0xf4, 0x65, 0x85, 0xdb, 0x78, 0x8d, 0x2e, 0x90, 0x55,
		0x6d, 0x64, 0x9a, 0xfe, 0x7a, 0xd5, 0xfe, 0x71, 0xf7, 0xfa, 0xb6, 0x9b,
		0xbf, 0xaa, 0x39, 0x90, 0x6a, 0x56, 0x30, 0xd9, 0x1e, 0x5e, 0x97, 0x25,
		0xfe, 0x18, 0x84, 0x3c, 0x26, 0x96, 0x46, 0x1d, 0xee, 0xd1, 0xb7, 0x43,
		0x72, 0xa4, 0x20, 0x4f, 0x6b, 0xed, 0x6c, 0x8c, 0x19, 0x6d, 0x02, 0x79,
		0x16, 0xdd, 0xf1, 0x80, 0x1f, 0x63, 0x8a, 0x2e, 0x71, 0x14, 0x6c, 0x75,
		0x51, 0x74, 0x33, 0x73, 0x29, 0xf4, 0x2d, 0x2b, 0xb5, 0x8a, 0x6c, 0xe5,
		0xdb, 0x14, 0xa7, 0xff, 0x6c, 0x88, 0x97, 0xd2, 0xb8, 0xc2, 0xe2, 0x3d,
		0x2e, 0x72, 0xe9, 0x74, 0x66, 0x2a, 0x2e, 0x73, 0xef, 0x7f, 0x03, 0x00,
		0x00, 0xff, 0xff, 0x0a, 0x91, 0xf1, 0xda, 0x4e, 0x01, 0x00, 0x00,
		},
		"src/js/twist.js",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"src/js/twist.js": src_js_twist_js,

}
