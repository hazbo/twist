package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func src_js_twist_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x8c, 0x8e,
		0x31, 0x4f, 0xf3, 0x30, 0x10, 0x86, 0x77, 0xff, 0x8a, 0x57, 0x9d, 0xda,
		0x7c, 0x1f, 0x2d, 0xac, 0x45, 0x4c, 0xa8, 0x88, 0x4a, 0x81, 0x85, 0x8e,
		0x2c, 0xc6, 0xbe, 0x90, 0x93, 0x8c, 0x13, 0x39, 0x97, 0x84, 0x0a, 0xf5,
		0xbf, 0x73, 0x4e, 0x22, 0xc4, 0xc8, 0x49, 0x1e, 0xfc, 0xdc, 0xbd, 0x77,
		0x8f, 0xd9, 0x15, 0x85, 0x41, 0x81, 0xd3, 0xc8, 0x9d, 0x60, 0xb8, 0xde,
		0xde, 0x5c, 0x79, 0x1a, 0x94, 0x64, 0xb8, 0x76, 0x1b, 0x3c, 0xda, 0x94,
		0xce, 0x28, 0xed, 0x98, 0x28, 0x3a, 0x5a, 0x1a, 0x25, 0x3b, 0x8a, 0x1d,
		0xed, 0xf1, 0x74, 0x3c, 0xe5, 0x7f, 0x7e, 0x0f, 0x4d, 0x82, 0xd4, 0x84,
		0xaa, 0x0f, 0x01, 0xae, 0x69, 0xcf, 0x89, 0xdf, 0x6b, 0x81, 0x8d, 0x1e,
		0x61, 0x1e, 0x07, 0xc7, 0xaa, 0x49, 0x1f, 0x56, 0xb8, 0x89, 0xff, 0xd1,
		0x06, 0xb2, 0xca, 0x06, 0xa6, 0x71, 0xca, 0x95, 0xc7, 0xfb, 0xc3, 0xf3,
		0xcb, 0x21, 0xaf, 0xaa, 0x38, 0x90, 0x32, 0x2b, 0x18, 0x6d, 0x07, 0xaf,
		0x66, 0x89, 0xdf, 0x7a, 0x21, 0x8f, 0x91, 0xa5, 0xd6, 0x0e, 0x77, 0xe8,
		0x9a, 0x3e, 0x39, 0xd2, 0x43, 0x9e, 0xb6, 0x9a, 0xd9, 0x19, 0x33, 0xd8,
		0x04, 0xf2, 0x2c, 0xea, 0x71, 0x87, 0x2f, 0x63, 0xa0, 0xd5, 0x26, 0x8e,
		0x82, 0xbd, 0x4a, 0x45, 0x97, 0xcf, 0xae, 0x85, 0x3e, 0x65, 0xa3, 0x5d,
		0x2c, 0x35, 0x0d, 0xcc, 0x74, 0x62, 0x97, 0x5f, 0xb9, 0x10, 0xff, 0x96,
		0xc4, 0x3f, 0xac, 0x5e, 0xe3, 0xea, 0x67, 0xc1, 0x65, 0x71, 0x51, 0x8d,
		0xd9, 0xe7, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x11, 0x2d, 0x33, 0xf3,
		0x66, 0x01, 0x00, 0x00,
		},
		"src/js/twist.js",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"src/js/twist.js": src_js_twist_js,

}
