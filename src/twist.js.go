package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func src_js_lang_php_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x7c, 0x8f,
		0xc1, 0xce, 0x82, 0x30, 0x10, 0x84, 0xcf, 0xf4, 0x29, 0x26, 0x7b, 0x82,
		0x40, 0xfe, 0x07, 0xf8, 0x91, 0x78, 0x30, 0xf1, 0xe8, 0x13, 0x70, 0x69,
		0x48, 0x0d, 0x24, 0xba, 0x12, 0x0a, 0x7a, 0x20, 0xbc, 0xbb, 0xdb, 0x02,
		0x45, 0x4d, 0xf4, 0xd6, 0xee, 0xcc, 0x7e, 0x33, 0x7b, 0xd7, 0x1d, 0xda,
		0xba, 0x45, 0x81, 0x51, 0x45, 0xf2, 0x38, 0x5c, 0xb4, 0xb5, 0x27, 0x7d,
		0x35, 0xf8, 0x07, 0x51, 0xa6, 0x54, 0xc4, 0xe6, 0xe1, 0x87, 0x32, 0x38,
		0x0f, 0x5c, 0xf5, 0xcd, 0x8d, 0x63, 0x16, 0x83, 0x6d, 0x75, 0x65, 0x32,
		0x54, 0xeb, 0x42, 0xe2, 0x08, 0x51, 0x5f, 0x37, 0xf6, 0xef, 0x8d, 0x53,
		0x6c, 0x96, 0x5c, 0x0c, 0x9d, 0xe9, 0x87, 0x8e, 0x41, 0xbb, 0xbd, 0xb8,
		0x4a, 0x2e, 0x39, 0xb0, 0x40, 0x48, 0xb1, 0xfd, 0x52, 0x50, 0xee, 0x74,
		0xbf, 0xed, 0xb5, 0xc0, 0x71, 0x5a, 0xc9, 0xa3, 0x53, 0x27, 0x12, 0xe8,
		0xb4, 0xf4, 0x3c, 0x2e, 0xfd, 0x3e, 0xab, 0xce, 0xd5, 0xd6, 0xe4, 0x55,
		0x0a, 0x79, 0x0e, 0x87, 0x38, 0xf9, 0x46, 0xfc, 0x49, 0xf3, 0xf7, 0xbe,
		0x44, 0xcf, 0x0e, 0x01, 0xa8, 0xe9, 0x19, 0x00, 0x00, 0xff, 0xff, 0x62,
		0xca, 0x2d, 0xb7, 0x5b, 0x01, 0x00, 0x00,
		},
		"src/js/lang/php.js",
	)
}

func src_js_twist_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x8c, 0x8f,
		0xc1, 0x4e, 0xf3, 0x30, 0x10, 0x84, 0xcf, 0xbf, 0x9f, 0x62, 0xd4, 0x53,
		0xdb, 0xbf, 0xb4, 0x70, 0x6d, 0xc5, 0x09, 0x15, 0x51, 0xa9, 0x70, 0xa1,
		0x47, 0x2e, 0xc6, 0xde, 0x90, 0x95, 0x5c, 0x27, 0x72, 0x36, 0x31, 0x15,
		0xea, 0xbb, 0x63, 0x27, 0x81, 0x22, 0x4e, 0x44, 0xca, 0xc1, 0xdf, 0xee,
		0xcc, 0xce, 0xac, 0xe6, 0x73, 0x85, 0x39, 0x0e, 0x91, 0x1b, 0x41, 0x77,
		0xbd, 0xbc, 0xb9, 0xb2, 0xd4, 0x25, 0x92, 0xe1, 0xd4, 0xcc, 0xf0, 0xa0,
		0x43, 0x38, 0x61, 0xaf, 0x63, 0x20, 0x6f, 0x68, 0x1c, 0xec, 0xd9, 0x90,
		0x6f, 0x68, 0x8d, 0xc7, 0xdd, 0x21, 0xbf, 0xf3, 0x7f, 0x5f, 0x05, 0x48,
		0x49, 0x28, 0x5a, 0xe7, 0x60, 0xaa, 0xfa, 0x14, 0xf8, 0xad, 0x14, 0x68,
		0x6f, 0xe1, 0x86, 0x75, 0xb0, 0x2f, 0xaa, 0x70, 0xd4, 0xc2, 0x95, 0x5f,
		0xa0, 0x76, 0xa4, 0x13, 0xeb, 0x98, 0x62, 0xaf, 0xdb, 0xef, 0xee, 0xb6,
		0x4f, 0xcf, 0xdb, 0x6c, 0x55, 0xb0, 0xa3, 0xc4, 0xb4, 0x20, 0xea, 0x06,
		0x36, 0x25, 0x0b, 0xfc, 0xda, 0x0a, 0x59, 0x44, 0x96, 0x32, 0x4d, 0xb8,
		0x41, 0x53, 0xb5, 0xc1, 0x50, 0x3a, 0x64, 0x69, 0x99, 0x34, 0x2b, 0xa5,
		0x3a, 0x1d, 0x40, 0x96, 0x25, 0xe5, 0xb8, 0xc5, 0x87, 0x42, 0xfa, 0xea,
		0xc0, 0x5e, 0xb0, 0x4e, 0x99, 0xbc, 0xc9, 0x57, 0xa7, 0x42, 0xef, 0x32,
		0x1b, 0x87, 0xdf, 0x0b, 0x03, 0xdd, 0xf4, 0xf0, 0xbc, 0x50, 0x17, 0xa5,
		0xf3, 0x7f, 0xd3, 0xe2, 0x3f, 0x26, 0x2f, 0x7e, 0xf2, 0xcb, 0x22, 0x06,
		0x16, 0xfa, 0x69, 0x90, 0x6b, 0x79, 0x7d, 0xa4, 0x2f, 0x93, 0x7f, 0xfd,
		0xc6, 0x05, 0x8f, 0x72, 0x75, 0x1e, 0xbb, 0xa4, 0x1a, 0x43, 0x9f, 0xcd,
		0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x71, 0x55, 0x17, 0xa5, 0x01,
		0x00, 0x00,
		},
		"src/js/twist.js",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"src/js/lang/php.js": src_js_lang_php_js,
	"src/js/twist.js": src_js_twist_js,

}
